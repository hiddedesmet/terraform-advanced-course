name: Terratest CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run-azure-tests:
        description: 'Run Azure-dependent tests'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  TF_VERSION: "1.8.0"
  GO_VERSION: "1.21"

jobs:
  # Validation tests that don't require Azure
  validation:
    name: Validation Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Go Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Format check
      run: |
        echo "Checking Go formatting..."
        echo "Go version: $(go version)"
        echo "Files to check:"
        find test/ -name "*.go" | head -10
        UNFORMATTED=$(gofmt -s -l test/)
        if [ -n "$UNFORMATTED" ]; then
          echo "The following files are not formatted correctly:"
          echo "$UNFORMATTED"
          echo "Please run: gofmt -s -w test/"
          exit 1
        fi
        echo "All Go files are properly formatted."
    
    - name: Run validation tests
      run: |
        go test -v ./test/ -run "TestTerraformValidation|TestNamingConventions" -timeout 10m

  # Module tests that require Azure credentials - only run when explicitly requested
  module-tests:
    name: Module Tests (Azure Required)
    runs-on: ubuntu-latest
    needs: validation
    # Only run when:
    # 1. Scheduled (nightly)
    # 2. Manual workflow dispatch with azure-tests=true
    # 3. PR has 'test-azure' label
    # 4. Commit message contains '[test-azure]'
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run-azure-tests == 'true') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test-azure')) || contains(toJSON(github.event.commits.*.message), '[test-azure]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Check Azure credentials availability
      run: |
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "❌ AZURE_CREDENTIALS secret is not set"
          exit 1
        else
          echo "✅ AZURE_CREDENTIALS secret is available"
        fi
        
        if [ -z "${{ secrets.ARM_CLIENT_ID }}" ]; then
          echo "❌ ARM_CLIENT_ID secret is not set"
        else
          echo "✅ ARM_CLIENT_ID secret is available"
        fi
        
        if [ -z "${{ secrets.ARM_TENANT_ID }}" ]; then
          echo "❌ ARM_TENANT_ID secret is not set"  
        else
          echo "✅ ARM_TENANT_ID secret is available"
        fi
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run module tests
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        go test -v ./test/ -run "TestNetworkModule|TestStorageModule|TestWebAppModule|TestKeyVaultModule|TestTaggingModule|TestModulesIntegration" -timeout 30m

  # Infrastructure tests
  infrastructure-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    needs: module-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'test-infrastructure')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run infrastructure tests
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        go test -v ./test/ -run "TestTerraformAdvancedInfrastructure" -timeout 45m

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: validation
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'test-security')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run security tests
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        go test -v ./test/ -run "TestSecurityCompliance|TestDataEncryption|TestAccessControl|TestComplianceTags" -timeout 30m

  # Performance tests (only on schedule)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: module-tests
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run performance tests
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        go test -v ./test/ -run "TestPerformanceBenchmarks|TestScalabilityLimits|TestResourceLimits" -timeout 60m

  # Complete test suite (only on main branch and schedule)
  complete-test-suite:
    name: Complete Test Suite
    runs-on: ubuntu-latest
    needs: [validation, module-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run complete test suite
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        go test -v ./test/ -run TestTerraformTestSuite -timeout 120m

  # Cleanup job to remove any orphaned resources
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [infrastructure-tests, security-tests, performance-tests, complete-test-suite]
    if: always() && (needs.infrastructure-tests.result != 'skipped' || needs.security-tests.result != 'skipped' || needs.performance-tests.result != 'skipped' || needs.complete-test-suite.result != 'skipped')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Cleanup test resources
      run: |
        echo "Cleaning up test resource groups..."
        
        # List all test resource groups
        TEST_RGS=$(az group list --query "[?starts_with(name, 'rg-test-') || starts_with(name, 'rg-perf-') || starts_with(name, 'rg-security-') || starts_with(name, 'rg-dr-') || starts_with(name, 'rg-backup-') || starts_with(name, 'rg-retention-') || starts_with(name, 'rg-scale-') || starts_with(name, 'rg-limits-') || starts_with(name, 'rg-concurrent-') || starts_with(name, 'rg-repl-') || starts_with(name, 'rg-network-test-') || starts_with(name, 'rg-storage-test-') || starts_with(name, 'rg-webapp-test-') || starts_with(name, 'rg-kv-test-') || starts_with(name, 'rg-compliance-') || starts_with(name, 'rg-access-test-') || starts_with(name, 'rg-encryption-test-')].name" -o tsv)
        
        if [ -n "$TEST_RGS" ]; then
          echo "Found test resource groups:"
          echo "$TEST_RGS"
          
          # Delete resource groups
          echo "$TEST_RGS" | xargs -I {} az group delete --name {} --yes --no-wait
          echo "Cleanup initiated for all test resource groups"
        else
          echo "No test resource groups found to cleanup"
        fi
      continue-on-error: true
