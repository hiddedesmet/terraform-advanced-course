name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-check:
    name: 'Terraform Check'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt-check
      run: |
        if ! terraform fmt -check -recursive; then
          echo "::error::Terraform formatting check failed. Run 'terraform fmt -recursive' locally to fix."
          echo "::warning::On pull requests, we're automatically fixing the formatting in the next step."
          exit 1
        fi
      continue-on-error: ${{ github.event_name == 'pull_request' }}

    - name: Terraform Format Fix (PR only)
      if: github.event_name == 'pull_request' && steps.fmt-check.outcome == 'failure'
      run: |
        terraform fmt -recursive
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add -A
        git commit -m "Automatically fix Terraform formatting"
        git push

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

  terraform-plan-dev:
    name: 'Terraform Plan (Dev)'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace Select
      run: terraform workspace select dev || terraform workspace new dev

    - name: Terraform Plan
      run: terraform plan -var-file="environments/dev.tfvars" -out=tfplan-dev
      
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-dev
        path: tfplan-dev

  terraform-plan-prod:
    name: 'Terraform Plan (Prod)'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace Select
      run: terraform workspace select prod || terraform workspace new prod

    - name: Terraform Plan
      run: terraform plan -var-file="environments/prod.tfvars" -out=tfplan-prod
      
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-prod
        path: tfplan-prod

  terraform-apply-dev:
    name: 'Terraform Apply (Dev)'
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev' && github.event.inputs.action == 'apply')
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-dev

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace Select
      run: terraform workspace select dev

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan-dev

  terraform-apply-prod:
    name: 'Terraform Apply (Prod)'
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-prod

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace Select
      run: terraform workspace select prod

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan-prod

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace Select
      run: terraform workspace select ${{ github.event.inputs.environment }}

    - name: Terraform Destroy
      run: terraform destroy -auto-approve -var-file="environments/${{ github.event.inputs.environment }}.tfvars"
